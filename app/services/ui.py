from __future__ import annotations
from html import escape
from aiogram.utils.keyboard import InlineKeyboardBuilder
from ..domain.payroll import PayrollContext
from ..utils.callback_data import PayrollAdd

MAX_MISSING_SHOW = 20  # —Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –≤ —Å–ø–∏—Å–∫–µ

def _short(s: str, n: int) -> str:
    s = s.strip()
    return s if len(s) <= n else s[: max(0, n - 1)] + "‚Ä¶"


def _profile_url(uid: int, username: str | None) -> str:
    # –µ—Å–ª–∏ –∑–Ω–∞–µ–º username ‚Äî –≤–µ–¥—ë–º –Ω–∞ https://t.me/username, –∏–Ω–∞—á–µ ‚Äî tg://user?id=...
    return f"https://t.me/{username}" if username else f"tg://user?id={uid}"


def _profile_link_html(uid: int, username: str | None, label: str | None = None) -> str:
    url = _profile_url(uid, username)
    text = label if label else (f"@{username}" if username else str(uid))
    return f'<a href="{escape(url)}">{escape(text)}</a>'


def payroll_screen_text_and_kb(ctx: PayrollContext, *, include_missing_zero: bool = False):
    lines = ["<b>–ò—Ç–æ–≥–∏ (payroll)</b>", ""]

    # –¢–∞–±–ª–∏—á–∫–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–º
    for row in ctx.per_teacher:
        if not include_missing_zero and row.classes == 0:
            continue
        mark = "‚úÖ" if row.classes > 0 else "‚Äî"
        teacher = escape(str(row.teacher_name))
        lines.append(f"{mark} {teacher}: {row.classes} √ó {row.rate:g} = <b>{row.amount:g}</b>")

    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ: <b>{ctx.total_amount:g}</b>")

    usernames = getattr(ctx, "usernames", {}) or {}

    # üëâ –ë–õ–û–ö: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
    missing_rows = [r for r in ctx.per_teacher if r.classes == 0]
    if missing_rows:
        lines.append("")
        lines.append(f"<b>–ù–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ ({len(missing_rows)}):</b>")
        for r in missing_rows[:MAX_MISSING_SHOW]:
            uname = usernames.get(r.teacher_id)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None ‚Äî —Ç–æ–≥–¥–∞ —É–π–¥—ë–º –ø–æ tg://id
            link = _profile_link_html(r.teacher_id, uname, str(r.teacher_name))
            lines.append(f" ‚Ä¢ {link}")
        if len(missing_rows) > MAX_MISSING_SHOW:
            lines.append(f"‚Ä¶ –∏ –µ—â—ë {len(missing_rows) - MAX_MISSING_SHOW}")

    # –°–ø–∏—Å–æ–∫ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤ (–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –Ω–æ –Ω–µ –≤ —Ä–æ—Å—Ç–µ—Ä–µ)
    if ctx.outsiders:
        lines.append("")
        lines.append("<b>–ù–æ–≤—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–µ (–Ω–µ –≤ —Ä–æ—Å—Ç–µ—Ä–µ):</b>")
        # –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å usernames ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º, –∏–Ω–∞—á–µ None
        for uid, name in ctx.outsiders[:10]:
            link = _profile_link_html(uid, usernames.get(uid))
            lines.append(f" ‚Ä¢ {escape(str(name))} ‚Äî {link}")

    text = "\n".join(lines)

    # –ö–Ω–æ–ø–∫–∏
    kb = InlineKeyboardBuilder()
    usernames = getattr(ctx, "usernames", {}) or {}
    for uid, name in ctx.outsiders[:10]:
        # –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å ..."
        kb.button(
            text=_short(f"–î–æ–±–∞–≤–∏—Ç—å {name}", 64),
            callback_data=PayrollAdd(poll_id=ctx.poll_id, teacher_id=uid).pack(),
        )
        # –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
        kb.button(
            text="–ü—Ä–æ—Ñ–∏–ª—å",
            url=_profile_url(uid, usernames.get(uid)),
        )
    kb.adjust(2)  # –ø–æ –¥–≤–∞ –≤ —Ä—è–¥: [–î–æ–±–∞–≤–∏—Ç—å][–ü—Ä–æ—Ñ–∏–ª—å]

    return text, kb.as_markup()
